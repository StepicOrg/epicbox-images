buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21"
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        for (line in output.toString().readLines()) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: "kotlin"

    sourceCompatibility = 11

    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        testCompile 'org.assertj:assertj-swing-junit:3.8.0'
        testCompile 'com.google.code.gson:gson:2.8.5'
        testImplementation 'com.github.hyperskill:hs-test:40f80fe7449dba912943a7eb40e9831ddb9065b7'
    }

    sourceSets {
        main {
            java.srcDir 'src'
        }
        test {
            java.srcDir 'test'
        }
    }

    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""

    test {
        outputs.upToDateWhen { false }
        afterTest { TestDescriptor test, TestResult result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                def message = result.exception?.message ?: "Wrong answer"
                def lines = message.readLines()
                println "#educational_plugin FAILED + " + lines[0]
                lines[1..-1].forEach { line ->
                    println "#educational_plugin" + line
                }
                // we need this to separate output of different tests
                println ""
            }
        }
    }

    def runOutput = new ByteArrayOutputStream()
    tasks.run.setStandardOutput(runOutput)
    tasks.run.doLast { printOutput(runOutput) }
}

project(':util') {
    dependencies {
        compile group: 'junit', name: 'junit', version: '4.12'
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
    dependencies {
        compile project(':util').sourceSets.main.output
        testCompile project(':util').sourceSets.test.output
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
}
